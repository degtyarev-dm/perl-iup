=for comment based on iup-3.5-XXX-UNFINISHED

[% h.name %]

[% n.iupnormalizer %]

[% h.desc %] 

Normalizes all controls from a list so their natural size to be the
biggest natural size among them. All natural width will be set to the
biggest width, and all natural height will be set to the biggest height
according to is value.

[% h.usage %]

[% h.create %]

 $normalizer = IUP::Normalizer->new(Ihandle *ih_first, ...);
 $normalizerv = IUP::Normalizerv->new(Ihandle **ih_list);
 iup.normalizer{ih_first, ...: ihandle} -> (elem: ihandle) [in Lua]
 normalizer(ih_first, ...) [in LED]

B<ih_first>, ... : List of the identifiers that will be normalized.
NULL must be used to define the end of the list in C. It can be empty.

[% txt.new_attr %]

B<Returns:> the identifier of the created element, or C<undef> if an error occurs.

[% h.at %]

[%txt.at_intro%]

=over

=item * B<NORMALIZE> (non inheritable)

normalization direction. Can be
HORIZONTAL, VERTICAL or BOTH. These are the same values of the
NORMALIZESIZE attribute. Default: HORIZONTAL.

=item * B<NORMALIZERGROUP> (non inheritable) B<(for contained controls use)>

name of a normalizer to automatically add the control. If a normalizer
with that name does not exists then one is created.

=item * B<ADDCONTROL> (non inheritable)

Adds a control to the normalizer. The
value passed must be the name of an element. Use
=item * L<IUP::SetHandle|IUP::SetHandle> or
L<IUP::SetAttributeHandle|IUP::SetAttributeHandle> to
associate an element to a name. In Lua you can also use the element
reference directly.

B<ADDCONTROL_HANDLE> (non inheritable)

Adds a control to the
normalizer. The value passed must be a handle of an element.

=back

[% h.notes %]

It is NOT necessary to add the normalizer to a dialog hierarchy. Every
time the NORMALIZE attribute is set a normalization occurs. If the
normalizer is added to a dialog hierarchy, then whenever the B<Natural>
size is calculated a normalization occurs, so add it to the hierarchy
before the elements you want to normalize or its normalization will be
not used.

The elements do NOT need to be children of the same parent, do NOT need
to be mapped, and do NOT need to be in a complete hierarchy of a
dialog.

The elements are NOT children of the normalizer. To remove or add other
elements, the normalizer must be destroyed and created a new one.

Has the same effect of the NORMALIZESIZE attribute of the L<IUP::Vbox|IUP::Vbox>
and L<IUP::Hbox|IUP::Hbox> controls, but it can be used for elements with different
parents, it changes the B<User> size of the elements.

[% h.examples %]

Here L<IUP::Normalizer|IUP::Normalizer> is used to normalize the horizontal size of
several labels that are in different containers. Since it needs to be
done once only the L<IUP::Normalizer|IUP::Normalizer> is destroyed just after it is
initialized.

 IUP::Destroy(IUP::SetAttributes(IUP::Normalizer(IUP::GetChild(hsi_vb, 0),  /* Hue Label */
                                           IUP::GetChild(hsi_vb, 1),  /* Saturation Label */
                                           IUP::GetChild(hsi_vb, 2),  /* Intensity Label */
                                           IUP::GetChild(clr_vb, 0),  /* Opacity Label */
                                           IUP::GetChild(clr_vb, 1),  /* Hexa Label */
                                           NULL), "NORMALIZE=HORIZONTAL"));

The following case use the internal normalizer in an Hbox:

 button_box = IUP::Hbox(
     IUP::Fill(),
     button_ok,
     button_cancel,
     button_help,
     NULL);
 IUP::SetAttribute(button_box, "NORMALIZESIZE", "HORIZONTAL");

[% h.see %]

L<IUP::Hbox|IUP::Hbox>, L< IUP::Vbox|../elem/iupvbox.html>

=cut