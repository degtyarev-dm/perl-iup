[% h.name %]

[% n.iuptimer %]

[% h.desc %]

Creates a timer which periodicaly invokes a callback when the time is
up. Each timer should be destroyed using
L<IUP::Destroy|IUP::Destroy>.

[% h.usage %]

[% h.create %]

 $timer = IUP::Timer->new(void);
 iup.timer{} -> (elem: ihandle) [in Lua] 
 timer() [in LED]

[% txt.new_attr %]

B<Returns:> the identifier of the created element, or C<undef> if an error occurs.

[% h.at %]

[%txt.at_intro%]

=over

=item * B<TIME>

The time interval in milliseconds. In Windows the minimum
value is 10ms.

=item * B<RUN>

Starts and stops the timer. Possible values: "YES" or "NO".
Returns the current timer state. If you have multiple threads start the
timer in the main thread.

=item * B<WID> (read-only)

Returns the native serial number of the timer.
Returns -1 if not running. A timer is mapped only when it is running.

=back

[% h.cb %]

[%txt.cb_intro%]

=over

=item * B<ACTION_CB>

Called when the time is up.

 int function(Ihandle *ih); [in C]
 elem:action_cb() -> (ret: number) [in Lua]

=over

=over

=item * B<ih> - identifier of the element that activated the event.

Returns: IUP_CLOSE will be processed.

=back

=back

[% h.examples %]

L<Browse for Example Files|../../examples/>

=cut