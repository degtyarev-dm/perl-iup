[% h.name %]

[% n.iupspin %]

[% h.desc %] and IUP::SpinBox

This functions will create a control set with a vertical box containing
two buttons, one with an up arrow and the other with a down arrow, to
be used to increment and decrement values.

Unlike the SPIN attribute of the L<IUP::Text|IUP::Text> element, the L<IUP::Spin|IUP::Spin>
element can NOT automatically increment the value and it is NOT
inserted inside the L<IUP::Text|IUP::Text> area.

[% h.usage %]

[% h.create %]

L<IUP::Spin|IUP::Spin> inherits from a L<IUP::Vbox|IUP::Vbox>, and contains two L<IUP::Button|IUP::Button>.

 Ihandle* IUP::Spin(void); [in C]
 iup.spin{} -> (elem: ihandle) [in Lua]
 spin() [in LED]

Returns: the identifier of the created element, or NULL if an error
occurs.

L<IUP::Spinbox|IUP::Spinbox> is an horizontal container that already contains a
L<IUP::Spin|IUP::Spin>.

 Ihandle* IUP::Spinbox(Ihandle* child); [in C]
 iup.spinbox{child: ihandle} -> (elem: ihandle) [in Lua]
 spinbox(child)  [in LED]

Returns: the identifier of the created element, or NULL if an error
occurs.

B<child>: Identifier of an interface element which will receive the
spinbox around.

[% h.cb %]

[%txt.cb_intro%]

=over

=item * B<SPIN_CB>

Called each time the user clicks in the buttons. It will
increment 1 and decrement -1 by default. Holding the Shift key will set
a factor of 2, holding Ctrl a factor of 10, and both a factor of 100.

 int function(Ihandle *ih, int inc); [in C]
 elem:spin_cb(inc: number) -> (ret: number) [in Lua]

=over

=item * xxxTODO

=back

=back

[% h.notes %]

The spinbox can be created with no elements and be dynamic filled using
L<IUP::Append|IUP::Append> or
L<IUP::Insert|IUP::Insert>.

[% h.examples %]

 Ihandle* spinbox = IUP::Spinbox(IUP::Text(NULL));

[IMAGE]

[% h.see %]

L<IUP::Text|IUP::Text>, L<IUP::Vbox|IUP::Vbox>,
L<IUP::Hbox|IUP::Hbox>, L<IUP::Button|IUP::Button>

=cut