# BEWARE: this is a generated file, DO NOT EDIT THIS FILE MANUALLY!!!

package IUP::Internal::Callback;

use strict;
use warnings;
require DynaLoader;
our @ISA = qw/ DynaLoader /;

bootstrap IUP::Internal::Callback;

use IUP::Internal::LibraryIup;

my $cb_table = {
[% FOR i IN pmitems -%]
  '[% i.module %]' => {
[% FOR j IN i.actions -%]
    [% j.action %] => \&[% j.xs_init_cb %],
[% END -%]
  },
[% END -%]
};

#xxxCHECKLATER: 
# maybe return something else then -1 in case of error
# GetByIhandle seems to be quite slow - try to optimize
# slow callback performance can be observed at examples\0-basic\cells_numbering.pl

sub _execute_cb { # convert just the first arg from ihandle to objref
  # keep as simple as possible, performace matters
  # params: ($ih, $action, ...)
  my ($ih, $action) = (shift, shift);
  my $ref = IUP->GetByIhandle($ih);
  return -1 unless $ref;
  return &{$ref->{$action}}($ref, @_);
}

sub _execute_cb_ih3 {  #Ihandle* ih,int lin,int col,Ihandle* drop,char* t,int i,int v
  # keep as simple as possible, performace matters
  # params: ($ih, $action, $lin, $col, $ih_drop, $i, $v)
  my ($ih, $action) = (shift, shift);
  my $ref = IUP->GetByIhandle($ih);
  return -1 unless $ref;
  $_[2] = IUP->GetByIhandle($_[2]);
  #xxxCHECKLATER (skipped for performace reasons) return -1 unless $_[2];
  return &{$ref->{$action}}($ref, @_);
}

sub _execute_cb_ih1 {  #Ihandle* ih,Ihandle* drop,int lin,int col
  # keep as simple as possible, performace matters
  # params: ($ih, $action, $ih_drop, $lin, $col)
  my ($ih, $action) = (shift, shift);
  my $ref = IUP->GetByIhandle($ih);
  return -1 unless $ref;
  $_[0] = IUP->GetByIhandle($_[0]);
  #xxxCHECKLATER (skipped for performace reasons) return -1 unless $_[0];
  return &{$ref->{$action}}($ref, @_);
}

sub _execute_cb_ih12 { #Ihandle* ih,Ihandle* new_tab,Ihandle* old_tab
  # keep as simple as possible, performace matters
  # params: ($ih, $action, $ih_newtab, $ih_oldtab)
  my ($ih, $action) = (shift, shift);
  my $ref = IUP->GetByIhandle($ih);
  return -1 unless $ref;
  $_[0] = IUP->GetByIhandle($_[0]);
  #xxxCHECKLATER (skipped for performace reasons) return -1 unless $_[0];
  $_[1] = IUP->GetByIhandle($_[1]);
  #xxxCHECKLATER (skipped for performace reasons) return -1 unless $_[1];
  return &{$ref->{$action}}($ref, @_);
}

sub _execute_cb_cnv7 { #Ihandle* ih,int line,int column,int xmin,int xmax,int ymin,int ymax,cdCanvas* canvas
  # keep as simple as possible, performace matters
  # params: ($ih, $action, $line, $column, $xmin, $xmax, $ymin, $ymax, $ch_canvas)
  my ($ih, $action) = (shift, shift);
  my $ref = IUP->GetByIhandle($ih);
  return -1 unless $ref;
  #xxxCHECKLATER use something like IUP->GetByCnvhandle
  $_[6] = IUP::Internal::LibraryIup::_translate_ch($_[6]) || IUP::Internal::Canvas->new_from_cnvhandle($_[6]);  
  #xxxCHECKLATER (skipped for performace reasons) return -1 unless $_[6];
  return &{$ref->{$action}}($ref, @_);
}

sub _execute_cb_cnv1 { #Ihandle* ih,cdCanvas* cnv
  # keep as simple as possible, performace matters
  # params: ($ih, $action, $ch_canvas)
  my ($ih, $action) = (shift, shift);
  my $ref = IUP->GetByIhandle($ih);
  return -1 unless ref($ref);
  #xxxCHECKLATER use something like IUP->GetByCnvhandle
  $_[0] = IUP::Internal::LibraryIup::_translate_ch($_[0]) || IUP::Internal::Canvas->new_from_cnvhandle($_[0]);  
  #xxxCHECKLATER (skipped for performace reasons) return -1 unless ref($_[0]);
  return &{$ref->{$action}}($ref, @_);
}

sub _get_cb_init_function {
  my ($pkg, $action) = @_;  
  my $p = $cb_table->{$pkg};
  my $f = $p->{$action} if $p;
  $f ||= $cb_table->{_dialog}->{$action} if $pkg =~ /^IUP::(Dialog|ColorDlg|FileDlg|FontDlg|MessageDlg)$/;
  $f ||= $cb_table->{_canvas}->{$action} if $pkg =~ /^IUP::(Canvas|CanvasGL)$/;
  $f ||= $cb_table->{_base}->{$action};  
  return $f;
}

sub _is_cb_valid {
  my ($pkg, $action) = @_;
  return (_get_cb_init_function($pkg, $action)) ? 1 : 0;
}

sub _get_cb_list {
  my $pkg = shift;
  my @list;
  push @list, keys(%{$cb_table->{$pkg}});
  push @list, keys(%{$cb_table->{_dialog}}) if $pkg =~ /^IUP::(Dialog|ColorDlg|FileDlg|FontDlg|MessageDlg)$/;
  push @list, keys(%{$cb_table->{_canvas}}) if $pkg =~ /^IUP::(Canvas|CanvasGL)$/;
  push @list, keys(%{$cb_table->{_base}});
  return keys %{{ map { $_ => 1 } @list }}; #return just uniq items
}

sub _get_cb_eval_code {
  my $pkg = shift;
  my $rv;
  for (_get_cb_list($pkg)) {
    next if defined  *{"$pkg\::$_"};
    $rv .= "*$pkg\::$_ = sub { return \$_[1] ? \$_[0]->SetCallback('$_', \$_[1]) : \$_[0]->{$_} };\n";
  }
  return $rv;
}

1;

__END__

=head1 NAME

IUP::Internal::Callback - [internal only] DO NOT USE this unless you know what could happen!

=cut
