=head1 Events and Callbacks Guide

=head2 Using

Callbacks are used by the application to receive notifications from the
system that the user or the system itself has interacted with the user
interface of the application. On the other hand attributes are used by
the application to communicate with the user interface system.

Even though callbacks have different purposes from attributes, they are
also associated to an element by means of an name.

The OLD method to associate a function to a callback, the application
must employ the B<IupSetAttribute> function, linking the action to a
name (passed as a string). From this point on, this name will refer to
a callback. By means of function B<IupSetFunction>, the user connects
this name to the callback. For example:

 int myButton_action(Ihandle* self);
 ...
 IupSetAttribute(myButton, "ACTION", "my_button_action");
 IupSetFunction("my_button_action", (Icallback)myButton_action);

In LED, callback are only assigned by their names. It will be still
necessary to associate the name with the corresponding function in C
using B<IupSetFunction>. For example:

 # In LED, is equivalent to the IupSetAttribute command in the previous example.
 bt = button("Title", my_button_action)  

In the NEW method, the application does not needs a global name, it
directly sets the callback using the attribute name using
B<IupSetCallback>. For example:

 int myButton_action(Ihandle* self);
 ...
 IupSetCallback(myButton, "ACTION", (Icallback)myButton_action);

The new method is more efficient and more secure, because there is no
risk of a name conflict. If the application uses LED, just ignore the
name in the LED, and replace B<IupSetFunction> by B<IupSetCallback>.

Although enabled in old versions, callbacks do NOT have B<inheritance>
like attributes.

All callbacks receive at least the element which activated the action
as a parameter (self).

The callbacks implemented in C by the application must return one of
the following values:

=over

=item * IUP_DEFAULT: Proceeds normally with user interaction. In case
other return values do not apply, the callback should return this
value.

=item * IUP_CLOSE: Call B<IupExitLoop> after return. Depending on the
state of the application it will close all windows and exit the
application. Applies only to some actions.

=item * IUP_IGNORE: Makes the native system ignore that callback
action. Applies only to some actions.

=item * IUP_CONTINUE: Makes the element to ignore the callback and pass
the treatment of the execution to the parent element. Applies only to
some actions.

=back

Only some callbacks support the last 3 return values. Check each
callback documentation. When nothing is documented then only
IUP_DEFAULT is supported.

An important detail when using callbacks is that they are only called
when the user actually executes an action over an element. A callback
is not called when the programmer sets a value via B<IupSetAttribute>.
For instance: when the programmer changes a selected item on a list, no
callback is called.

The order of callback calling is system dependent. For instance, the
RESIZE_CB and the SHOW_CB are called in different order in Win32 and in
X-Windows when the dialog is shown for the first time.

To help the definition of callbacks in C, the header "iupcbs.h" can be
used, there are typedefs for all the callbacks.

=head2 X<mainloop>Main Loop

IUP is an event-oriented interface system, so it will keep a loop
E<ldquo>waitingE<rdquo> for the user to interact with the application.
For this loop to occur, the application must call the B<IupMainLoop>
function, which is generally used right before B<IupClose>.

When the application is closed by returning IUP_CLOSE in a callback,
calling B<IupExitLoop> or by hiding the last visible dialog, the
function B<IupMainLoop> will return.

The B<IupLoopStep> and the B<IupFlush> functions force the processing
of incoming events while inside an application callback.

=head2 IupLua

Callbacks in Lua have the same names and receive the same parameters as
callbacks in C, in the same order. In Lua the callbacks they can either
return a value or not, the IupLua binding will automatically return
IUP_DEFAULT if no value is returned. In Lua callbacks can be Lua
functions or strings with Lua code.

The callbacks can also be implemented as methods, using the
languageE<rsquo>s resources for object orientation. Thus, the element
is implicitly passed as the B<self> parameter.

The following example shows the definition of an action for a button.

 function myButton:action ()
   local aux = self.fgcolor
   self.fgcolor = self.bgcolor
   self.bgcolor = aux
 end 

Or you can do

 function myButton_action(self)
   ...
 end
 myButton.action = myButton_action

Or also

 myButton.action = function (self)
   ...
 end

Or, as a string

 myButton.action = "local aux = self.fgcolor; 
                    self.fgcolor = self.bgcolor; 
                    self.bgcolor = aux"

Altough some callbacks exists only in specific controls, all the
callbacks can be set for all the controls. This is usefull to set a
callback for a box, so it will be inherited by all the elements inside
that box which implements that callback.

=cut