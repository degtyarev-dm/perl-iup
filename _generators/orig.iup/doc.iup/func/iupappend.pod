=head1 IupAppend

Inserts an interface element at the end of the container. Valid for any
element that contains other elements like dialog, frame, hbox, vbox,
zbox or menu.

=head2 Parameters/Return

 Ihandle* IupAppend(Ihandle* ih, Ihandle* new_child); [in C]
 iup.Append(ih, new_child: ihandle) -> (parent: ihandle) [in Lua]

B<ih>: Identifier of a container like hbox, vbox, zbox and menu.

B<new_child>: Identifier of the element to be inserted.

Returns: the actual B<parent> if the interface element was successfully
inserted. Otherwise returns NULL (nil in Lua). Notice that the desired
parent can contains a set of elements and containers where the child
will be actually attached so the function returns the actual parent of
the element.

=head2 Notes

This function can be used when elements that will compose a container
are not known I<a priori> and should be dynamically constructed.

The new child can NOT be mapped. It will NOT map the new child into the
native system.

If the actual parent is a layout box (B<IupVbox>, B< IupHbox> or
B<IupZbox>) and you try to append a child that it is already at the
parent child list, then the child is moved to the last child position.

If the parent is already mapped you must explicitly call B<IupMap> for
the appended children or for the main container.

The elements are NOT immediately repositioned. Call B<IupRefresh> for
the container (or any other element in the dialog) to update the dialog
layout.

=head2 See Also

L<IupDetach|iupdetach.html>, L<IupInsert|iupinsert.html>,
L<IupHbox|../elem/iuphbox.html>, L<IupVbox|../elem/iupvbox.html>,
L<IupZbox|../elem/iupzbox.html>, L<IupMenu|../elem/iupmenu.html>,
L<IupMap|iupmap.html>, L<IupUnmap|iupunmap.html>,
L<IupRefresh|iuprefresh.html>

=cut