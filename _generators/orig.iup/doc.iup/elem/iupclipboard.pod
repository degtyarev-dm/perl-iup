=head1 IupClipboard (since 3.0)

Creates an element that allows access to the clipboard. Each clipboard
should be destroyed using L<IupDestroy|../func/iupdestroy.html>, but
you can use only one for entire application because it does not store
any data inside. Or you can simply create and destroy everytime you
need to copy or paste.

=head2 Creation

 Ihandle* IupClipboard(void); [in C]
 iup.clipboard{} -> (elem: ihandle) [in Lua] 
 clipboard() [in LED]

Returns: the identifier of the created element, or NULL if an error
occurs.

=head2 Attributes

B<EMFAVAILABLE> (read-only) [Windows Only]: informs if there is a
Windows Enhanced Metafile available at the clipboard. (Since 3.2)

B<IMAGE> (write-only): name of an image to copy (set) or paste (get),
to or from the clipboard. (GTK 2.6)

B<IMAGEAVAILABLE> (read-only): informs if there is an image available
at the clipboard. (GTK 2.6)

B<NATIVEIMAGE>: native handle of an image to copy or paste, to or from
the clipboard. In Win32 is a B<HANDLE> of a DIB. In GTK is a
B<GdkPixbuf*>. In Motif is a B<Pixmap>. The returned handle in a paste
must be released after used (GlobalFree(handle), g_object_unref(pixbuf)
or XFreePixmap(display, pixmap)). After copy, do NOT release the given
handle. See L< IUP-IM Functions|../iupim.html> for utility functions on
image native handles. (GTK 2.6)

B<SAVEEMF> (write-only) [Windows Only]: saves the EMF from the
clipboard to the given filename. (Since 3.2)

B<SAVEWMF> (write-only) [Windows Only]: saves the WMF from the
clipboard to the given filename. (Since 3.2)

B<TEXT>: copy or paste text to or from the clipboard.

B<TEXTAVAILABLE> (read-only): informs if there is a text available at
the clipboard.

B<WMFAVAILABLE> (read-only) [Windows Only]: informs if there is a
Windows Metafile available at the clipboard. (Since 3.2)

=head2 Examples

 Ihandle* clipboard = IupClipboard();
 IupSetAttribute(clipboard, "TEXT", IupGetAttribute(text, "VALUE"));
 IupDestroy(clipboard);
 Ihandle* clipboard = IupClipboard();
 IupSetAttribute(text, "VALUE", IupGetAttribute(clipboard, "TEXT"));
 IupDestroy(clipboard);

=cut