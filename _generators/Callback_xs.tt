/* BEWARE: this is a generated file, DO NOT EDIT THIS FILE MANUALLY!!! */

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"
#include "ppport.h"

#include <iup.h>
#include <cd.h>

SV* canvas2SV(cdCanvas* canvas) {
  SV* ptrSV = newSViv(PTR2IV(canvas));
  char* hkey = SvPV_nolen(ptrSV);
  HV* globreg = get_hv("IUP::Internal::LibraryIup::ch_register", 0);

  /* ### check if canvas pointer is present in global hash 'ch_register' */
  SV** ref = hv_fetch(globreg, hkey, strlen(hkey), 0);
  if (ref != NULL) return *ref;

  /* ### http://stackoverflow.com/questions/1497836/how-do-i-write-a-perl-constructor-in-xs */
  /*warn("DEBUG: need to create IUP::Internal::Canvas %s\n",hkey);*/
  HV* hash = (HV *)sv_2mortal((SV *)newHV());
  SV* obj = sv_bless( newRV((SV*)hash), gv_stashpv("IUP::Internal::Canvas", 1) );
  hv_store(hash, "___cnvhandle", 12, ptrSV, 0);
  hv_store(globreg, hkey, strlen(hkey), newSVsv(obj), 0); /*store into globreg*/
  return sv_2mortal(obj);
}

SV* ihandle2SV(Ihandle* ih) {  
  SV* ptrSV = newSViv(PTR2IV(ih));
  char* hkey = SvPV_nolen(ptrSV);
  HV* globreg = get_hv("IUP::Internal::LibraryIup::ih_register", 0);

  /* ### check if canvas pointer is present in global hash 'ih_register' */
  SV** ref = hv_fetch(globreg, hkey, strlen(hkey), 0);
  if (ref != NULL) return *ref;
  
  /* ### http://stackoverflow.com/questions/1497836/how-do-i-write-a-perl-constructor-in-xs */
  /*warn("DEBUG: need to create IUP::Internal::Element %s\n",hkey);*/
  HV* hash = (HV *)sv_2mortal((SV *)newHV());
  SV* obj = sv_bless( newRV((SV*)hash), gv_stashpv("IUP::Internal::Element", 1) );
  hv_store(hash, "___ihandle", 10, ptrSV, 0);
  hv_store(globreg, hkey, strlen(hkey), newSVsv(obj), 0); /*store into globreg*/
  return sv_2mortal(obj);
}

int call_cb_func(SV* element, char *action) {
  /* call_pv(element->{action},G_ARRAY) */
  HV* hash = MUTABLE_HV(SvRV(element));
  SV** ref = hv_fetch(hash, action, strlen(action), 0);
  if (ref != NULL) return call_sv(*ref,G_ARRAY);
  return -1; /*xxxCHECKLATER not sure if -1 is a good idea*/
}
[% FOREACH i IN xsitems %]
[% i.c_retval %]
[% i.xs_internal_cb %] [% i.xs_internal_cb_params %]
{
	dSP;
	int count;
	[% i.c_retval %] rv = [% i.xs_internal_default_rv %];
	SV* element = ihandle2SV(ih);
[% FOR j IN i.xs_internal_cb_locvar -%]
	[% j %]
[% END -%]

	ENTER;
	SAVETMPS;

	/* push params for [% i.xs_internal_cb_pfunc %]() */
	PUSHMARK(SP);
	XPUSHs(element);
[% FOREACH j IN i.xs_internal_cb_push -%]
	[% j %]
[% END -%]
	PUTBACK;

	count = call_cb_func(element,"[% i.xs_internal_action_key %]");

	SPAGAIN;

	[% i.xs_internal_cb_rvcheck %]
	else {
[% FOR j IN i.xs_internal_cb_extrapop -%]
	  [% j %]
[% END -%]
	  rv = [% i.xs_internal_cb_pop %];
	}

	PUTBACK;
	FREETMPS;
	LEAVE;
	
	return rv;
} 
[% END %]

MODULE = IUP::Internal::Callback	PACKAGE = IUP::Internal::Callback

BOOT:
/* empty boot */

[% FOREACH i IN xsitems %]
void
[% i.xs_init_cb %](ih,action)
		Ihandle* ih;
		char* action;
	CODE:
		IupSetCallback(ih, action, (Icallback)[% i.xs_internal_cb %]);
[% END %]
