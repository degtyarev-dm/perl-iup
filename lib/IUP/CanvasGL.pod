=head1 NAME



=head1 DESCRIPTION

Creates an OpenGL canvas (drawing area for OpenGL). It inherits from
L<IUP::Canvas|IUP::Canvas>.

=head2 Initialization and Usage

The L<IUP::GLCanvasOpen|IUP::GLCanvasOpen> function must be called after a L<IUP::Open|IUP::Open>, so
that the control can be used. The "iupgl.h" file must also be included
in the source code. The program must be linked to the controls library
(iupgl), and with the OpenGL library.

To make the control available in Lua use require"iupluagl" or manually
call the initialization function in C, B<iupgllua_open>, after calling
B<iuplua_open>. When manually calling the function the iupluagl.h file
must also be included in the source code and the program must be linked
to the lua control library (iupluagl).

To link with the OpenGL libraries in Windows add: opengl32.lib. In UNIX
add before the X-Windows libraries: -LGL.

The Lua binding does not include OpenGL functions. But you can use any
OpenGL binding available, for example the
L<LuaGL|http://luagl.sourceforge.net/> binding.

=head1 USAGE

=head2 CREATION - new() method

 Ihandle* IUP::GLCanvas(const char* action); [in C]
 iup.glcanvas{} -> (elem: ihandle) [in Lua]
 glcanvas(action) [in LED]

B<action>: Name of the action generated when the canvas needs to be
redrawn. It can be NULL.

Returns: the identifier of the created element, or NULL if an error
occurs.

=head2 ATTRIBUTES

For more info about concept of attributes (setting/getting values etc.)
see L<IUP::Manual::03_Attributes|IUP::Manual::03_Attributes>. Attributes specific to this element:

=over

The L<IUP::GLCanvas|IUP::GLCanvas> element handle all attributes defined for a
conventional canvas, see L<IUP::Canvas|IUP::Canvas>.

Apart from these attributes, L<IUP::GLCanvas|IUP::GLCanvas> handle specific attributes
used to define the kind of buffer to be instanced. Such attributes are
all B<creation only >attributes and must be set before the element is
mapped on the native system. After the mapping, specifying these
special attributes has no effect.

=back

The following L<common attributes|IUP::Manual::03_Attributes/Common Attributes> are also accepted:

=over

=item * B<ACCUM_RED_SIZE>,B< ACCUM_GREEN_SIZE>,B< ACCUM_BLUE_SIZE> andB<
ACCUM_ALPHA_SIZE>

Indicate the number of bits for representing the
color components in the accumulation buffer. Value 0 means the
accumulation buffer is not necessary. Default is 0.

=item * B<ALPHA_SIZE>

Indicates the number of bits for representing each
colors alpha component (valid only for RGBA and for hardware that store
the alpha component). Default is "0".

=item * B<BUFFER>

Indicates if the buffer will be single "SINGLE" or double
"DOUBLE". Default is "SINGLE".

=item * B<BUFFER_SIZE>

Indicates the number of bits for representing the color
indices (valid only for INDEX). The system default is 8 (256-color
palette).

=item * B<COLOR>

Indicates the color model to be adopted: "INDEX" or "RGBA".
Default is "RGBA".

=item * B<COLORMAP> (read-only)

Returns "Colormap" in UNIX and "HPALETTE"
in Win32, if COLOR=INDEX.

=item * B<CONTEXT> (read-only)

Returns "GLXContext" in UNIX and "HGLRC" in
Win32.

=item * B<DEPTH_SIZE>

Indicates the number of bits for representing the I<z>
coordinate in the z-buffer. Value 0 means the z-buffer is not
necessary.

=item * B<ERROR> (read-only)

If an error is found, returns a string containing
a description of the error in English.

=item * B<RED_SIZE>,B< GREEN_SIZE> andB< BLUE_SIZE>

Indicate the number of
bits for representing each color component (valid only for RGBA). The
system default is usually 8 for each component (True Color support).

=item * B<REFRESHCONTEXT> (write-only) [Windows Only]

action attribute to
refresh the internal device context when it is not owned by the window
class. The IUP::Canvas of the Win32 driver will always create a window
with an owned DC, but GTK in Windows will not. 

=item * B<STENCIL_SIZE>

Indicates the number of bits in the stencil buffer.
Value 0 means the stencil buffer is not necessary. Default is 0.

=item * B<STEREO>

Creates a stereo GL canvas (special glasses are required to
visualize it correctly). Possible values: "YES" or "NO". Default: "NO".

=item * B<SHAREDCONTEXT>

name of another IUP::GLCanvas that will share its
display lists and textures. That canvas must be mapped before this
canvas.

=item * B<VISUAL> (read-only)

Returns "XVisualInfo*" in UNIX and "HDC" in
Win32.

=back

=head2 CALLBACKS

For more info about concept of callbacks (setting callback handlers etc.)
see L<IUP::Manual::04_Callbacks|IUP::Manual::04_Callbacks>. Callbacks specific to this element:

=over

=item * L<RESIZE_CB|../call/iup_resize_cb.html>

By default the resize callback
sets:

 glViewport(0,0,width,height);

=item * The L<IUP::GLCanvas|IUP::GLCanvas> element understands all callbacks defined for a
conventional canvas, see L<IUP::Canvas|IUP::Canvas>.

=back
 
=head2 Auxiliary Functions

These are auxiliary functions based on the WGL and XGL extensions.
Check the respective documentations for more information.

=head3 GLMakeCurrent()

 void IUP::GLMakeCurrent(Ihandle* ih); [in C]
 iup.GLMakeCurrent(ih: ihandle) [in Lua]

Activates the given canvas as the current OpenGL context. All
subsequent OpenGL commands are directed to such canvas.

=head3 GLIsCurrent()

 int IUP::GLIsCurrent(Ihandle* ih); [in C]
 iup.GLIsCurrent(ih: ihandle) -> status: boolean [in Lua]

Returns a non zero value if the given canvas is the current OpenGL
context.

=head3 GLSwapBuffers()

 void IUP::GLSwapBuffers(Ihandle* ih); [in C]
 iup.GLSwapBuffers(ih: ihandle) [in Lua]

Makes the BACK buffer visible. This function is necessary when a double
buffer is used.

=head3 GLPalette()

 void IUP::GLPalette(Ihandle* ih, int index, float r, float g, float b); [in C]
 iup.GLPalette(ih: ihandle, index, r, g, b: number) [in Lua]

Defines a color in the color palette. This function is necessary when
INDEX color is used.

=head3 GLUseFont()

 void IUP::GLUseFont(Ihandle* ih, int first, int count, int list_base); [in C]
 iup.GLUseFont(ih:ihandle, first, count, list_base: number) [in Lua]

Creates a bitmap display list from the current FONT attribute. See the
documentation of the wglUseFontBitmaps and glXUseXFont functions.

=head3 GLWait()

 void IUP::GLWait(int gl) [in C]
 iup.GLWait(gl: number) [in Lua]

If gl is non zero it will call glFinish or glXWaitGL, else will call
GdiFlush or glXWaitX. 

=head1 NOTES

In Windows XP, if the COMPOSITE attribute is enabled then the hardware
acceleration will be disabled.

The L<IUP::GLCanvas|IUP::GLCanvas> works with the GTK base driver in Windows and in
UNIX (X-Windows).

Not available in SunOS510x86 just because we were not able to compile
OpenGL code in our installation.

=head1 EXAMPLES

L<Browse for Example Files|../../examples/>

[IMAGE]

=head1 SEE ALSO

L<IUP::Canvas|IUP::Canvas>

=cut