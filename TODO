################ the last time working on ################ 
- broken examples: examples\0-basic \_*.pl
- questions related to weaken/non-weaken refs
##########################################################

######## weaken refs in global tables - element destruction issues
GetDialogChild(ih, "mltline") + GetByName - both destroys element when going off scope
setting callback should avoid an automatic destruction
Destroy() should unset all registered callbacks
info:
- 1: use weaken (Scalar::Util) http://stackoverflow.com/questions/2223721/common-perl-memory-reference-leak-patterns
- 2: perl -d:TraceUse script vs. scandeps 
global registers:
- register classes created in GetByIhandle (similarly fo canvas)
- or register in: new_from_cnvhandle new_from_ihandle

######## misc issues to be solved before fixing API
#IUP::PPlot - xxx TODO maybe add AddSeries to IUP::PPlot # see iupx.lua + iupxpplot.lua (see 3.4)
#IUP::PPlot - xxx TODO maybe add AxsBounds to IUP::PPlot # see iupx.lua + iupxpplot.lua
#IUP::PPlot - EDIT_CB handler should return (IUP_DEFAULT, $new_x, $new_y)
#IUP - IUP->SetIdle vs. IUP->GetIdle? #xxx how to check existing idle handler?
#IUP - Idle? #xxxsomething causes progressbar3.pl to hangup/crash (after pressing accel/decel)
#IUP - add IUP->GetClassName[FromIh] IUP::Internal::LibraryIup::_IupGetClassName
#IUP - consider adding iupKeyCodeToName
#IUP - consider adding iupKeyNameToCode
#IUP - ListDialog() decide whether multiselect API (returning array, not arrayref) is OK
#IUP::Canvas - cd methods vs functions: cdEncodeColor vs. $cnv->cdEncodeColor (perhaps turn them all into methods)
#IUP::Canvas - add something like IUP::Canvas::EMF / SVG / DXF / ... my $cnv IUP::Canvas::EMF->new( filename=>'x.emf', resolution=>4, ...);
#IUP::Internal::Element - list2.pl: original examples uses inheritable IUP attribute _LABEL for storing pointers for iup elements (do we want to support this in perl?)
#IUP::Internal::Element - consider checking arg count SetAttributeId($$$) SetAttributeId2($$$$)
#IUP::Internal::Element - passing undef to child=> ... Can't call method "ihandle" on an undefined value at Y:\@repos\perl-iup\blib\lib/IUP/Internal/Element.pm line 574. (better error message)
#IUP::Internal::Element - Discard() = destroy perl object without destroying iup element
#IUP::LayoutDialog - maybe support named new params e.g. dialog=>... 
#IUP::Frame - missing accessor $frame->MARGIN("10x10");
#IUP::List - IUP::List->new() items 0-based or 1-based index?

######## IUP::Tree
#IUP::Tree - #NOTE: tree->TreeAddNodes(...) has to go after dialog->Show() + tree->SetAttribute(...) has to go after dialog->Show() xxx why?
#IUP::Tree - should it be maped before show as canvas?
- Convert Lua interface into Perl:
  TreeAddNodes($newnodes, [$id])                #some draft is already in Tree.pm
  TreeSetNodeAttributes($id, $attrs)            #some draft is already in Tree.pm
  TreeSetAncestorsAttributes($startid, $attrs)	#some draft is already in Tree.pm
  TreeSetDescentsAttributes($startid, $attrs)   #some draft is already in Tree.pm 
  TreeSetAttributeHandle($name, $value)         #some draft is already in Tree.pm 
- examples:
  http://www.wxpython.org/docs/api/wx.TreeCtrl-class.html
  root = self.tree.AddRoot("Example")
  items = [ "test1", "test2", "test3",]
  self.AddTreeNodes(root, items) #not in a lib
  self.tree.Expand(root)
  tree.AppendItem(parentItem, item)
  tree.GetItemText(item)   
- examples Wx
  Convert (Wx::TreeCtrl, HASHREF)
  AddRoot ($text, $data) Add a root to the control. Returns root id.
  AppendItem ($parent, $text, $data)   Add an item to the control as the last child of $parent. Returns item id.
  AppendContainer ($parent, $text, $data)    Add a container to the control as the last child of $parent. This does the same as AppendItem() but marks the node as a container.
  PrependItem ($parent, $text, $data)    Add an item to the control as the first child of $parent. Returns item id.
  PrependContainer ($parent, $text, $data)    Add a container to the control as the first child of $parent.
  InsertItem ($parent, $before | $previous, $text, $data)    Inserts an item after a given one (previous) or before one identified by its position (before).
  InsertContainer ($parent, $before | $previous, $text, $data)    See InsertItem().

######## missing examples
- no example for: Clipboard.pm ?
- no example for: User.pm ?
- no example for: ColorDlg.pm ?
- no example for: FontDlg.pm ?

!!Big Task!!######## doc
- Cleanup first (in this order):
  - IUP.pod
  - I::M::Elements.pod
  - I::M::Callbacks.pod
  - I::M::Attributes.pod
  - I::M::Introduction.pod
- Notes:
  - pplot: note in doc that DS_ has to be set after ->PPlotEnd()
  - tree: note in doc that tree->SetAttribude has to go after dialog->Show

!!Big Task!!######## tests
- CHECK Test::NeedsDisplay
- skip pattern
  plan skip_all => "\$ENV{RELEASE_TESTING} required fot testing", unless $ENV{RELEASE_TESTING};
  eval "use Win32::Job ()";
  plan skip_all => "Can't interrupt hung processes without Win32::Job" if $@;
  plan skip_all => "No GUI available, skipping" unless IUP->Open == IUP_OPENED;
  use Test::NeedsDisplay ':skip_all';
- consider moving cross-check-... into xt/*
- maybe close after timeout (IUP::Timer -> return IUP_CLOSE)

!!Big Task!! ######## OleControl.pm
- $o->IUNKNOWN ... pointer created by CoCreateInstance Function http://msdn.microsoft.com/en-us/library/ms686615%28v=vs.85%29.aspx
- perahps integrate with Win32::OLE like $o->ole->methodname(...)
- Win32::OLE needs something like new_from_iunknown
  IUnknown *punk = ... value from $olecontrol->IUNKNOWN;
  HRESULT hr;
  IDispatch *pDispatch = NULL;
  hr = punk->QueryInterface(IID_IDispatch, (void**)&pDispatch);
  punk->Release();
  ST(0) = CreatePerlObject(aTHX_ stash, pDispatch, destroy);
- see Wx+OLE/ActiveX integration http://search.cpan.org/~mdootson/Wx-ActiveX-0.15/lib/Wx/ActiveX.pm
- missing example: notepad.wlua? olecontrol_browser.wlua?

!!Big Task!!######## IUP::Canvas (now works without Bitmap/Image/Palette/Pattern related functions)
- implement missing XS methods to IUP::Internal::Canvas (see notes in Canvas.xs)

1/ non-Bitmap (easier to implement)
# void cdCanvasTransform(cdCanvas* canvas, const double* matrix);
# double* cdCanvasGetTransform(cdCanvas* canvas);
# void cdCanvasTransformMultiply(cdCanvas* canvas, const double* matrix);
# void cdCanvasLineStyleDashes(cdCanvas* canvas, const int* dashes, int count);
# void cdCanvasStipple(cdCanvas* canvas, int w, int h, const unsigned char* stipple);
# unsigned char* cdCanvasGetStipple(cdCanvas* canvas, int *n, int *m);
# void cdCanvasPattern(cdCanvas* canvas, int w, int h, long const int *pattern);
# long* cdCanvasGetPattern(cdCanvas* canvas, int* n, int* m);
# double* cdCanvasVectorTextTransform(cdCanvas* canvas, const double* matrix);
# void cdCanvasPalette(cdCanvas* canvas, int n, const long *palette, int mode);
# void wdCanvasStipple(cdCanvas* canvas, int w, int h, const unsigned char *fgbg, double w_mm, double h_mm);
# void wdCanvasPattern(cdCanvas* canvas, int w, int h, const long *color, double w_mm, double h_mm);
    n_idata2SV(count,dataptr)
    SV2n_idata(srcSV,&count,&dataptr)		do malloc!!!
    r_c_cdata2SV(rows,cols,dataptr)
    SV2r_c_cdata(srcSV,&rows,&cols,&dataptr)	do malloc!!!
    r_c_ldata2SV(rows,cols,dataptr)
    SV2r_c_ldata(srcSV,&rows,&cols,&dataptr)	do malloc!!!
    transf_matrix2SV(matrix_2x3)
    SV2transf_matrix(srcSV,&matrix_2x3)

sample XS code from FTDI::D2XX:

FT_STATUS
FT_Read( pHandle, Buffer, nBufferSize, lpBytesReturned)
    FT_HANDLE * pHandle
    SV * Buffer = NO_INIT
    DWORD nBufferSize
    DWORD lpBytesReturned = NO_INIT
	PREINIT:
		char* lpBuffer;
		AV* array;
		DWORD i;
	CODE:		
		lpBuffer = malloc(nBufferSize); // get mem
		RETVAL = FT_Read(*pHandle, lpBuffer, nBufferSize, &lpBytesReturned);		
		array = (AV *)sv_2mortal((SV *)newAV()); // new array		
		av_extend(array,lpBytesReturned); // extend it ( not required but faster) 		
		for( i = 0; i< lpBytesReturned; i++) { // copy to array
		  av_push(array,newSVuv(lpBuffer[i]));
		}		
		free(lpBuffer); // give back mem		
		Buffer = newRV((SV *) array); // return reference of the array
	OUTPUT: 
		Buffer
		lpBytesReturned
		RETVAL

FT_STATUS
FT_Write( ftHandle, Buffer, nBufferSize, BytesWritten)
    	FT_HANDLE  ftHandle
    	SV * Buffer
    	DWORD nBufferSize
    	DWORD BytesWritten = NO_INIT
    	PREINIT:
		AV * arrayBuffer;
		char * lpBuffer;
		DWORD i;
	CODE:	
		if( (!SvROK(Buffer)) || (SvTYPE(SvRV(Buffer)) != SVt_PVAV) || !((DWORD)av_len((AV *)SvRV(Buffer)) < nBufferSize)) {
		  printf("Data type error\n");			
		  XSRETURN_UNDEF;
		}
		lpBuffer = malloc(nBufferSize);
		arrayBuffer = (AV *)SvRV(Buffer);
		for(i=0; i<nBufferSize;i++) {
		  lpBuffer[i] = (char)SvUV(*av_fetch(arrayBuffer,i,0));
		}
		RETVAL = FT_Write( ftHandle, lpBuffer, nBufferSize, &BytesWritten);
		free(lpBuffer);
	OUTPUT:
		RETVAL
		BytesWritten

    
--
cd.CreatePattern(width, height: number) -> (pattern: cdPattern)
cd.KillPattern(pattern: cdPattern)
--
cd.CreateStipple(width, height: number) -> (stipple: cdStipple)
cd.KillStipple(stipple: cdStipple)
--
cd.CreatePalette(size: number) -> (palette: cdPalette) [in Lua Only]
cd.KillPalette(palette: cdPalette) [in Lua Only]

2/ Bitmap related - not decided yet how to implement them
#(depr) void cdCanvasGetImageRGB(cdCanvas* canvas, unsigned char* r, unsigned char* g, unsigned char* b, int x, int y, int w, int h);
#(depr) void cdCanvasPutImageRectRGB(...);
#(depr) void cdCanvasPutImageRectRGBA(...);
#(depr) void cdCanvasPutImageRectMap(...);
#(depr) void wdCanvasPutImageRectRGB(...);
#(depr) void wdCanvasPutImageRectRGBA(...);
#(depr) void wdCanvasPutImageRectMap(...);
# cdBitmap* cdCreateBitmap(int w, int h, int type);
# cdBitmap* cdInitBitmap(int w, int h, int type, ...);
# void cdKillBitmap(cdBitmap* bitmap);
# unsigned char* cdBitmapGetData(cdBitmap* bitmap, int dataptr);
# void cdBitmapSetRect(cdBitmap* bitmap, int xmin, int xmax, int ymin, int ymax);
# void cdCanvasPutBitmap(cdCanvas* canvas, cdBitmap* bitmap, int x, int y, int w, int h);
# void cdCanvasGetBitmap(cdCanvas* canvas, cdBitmap* bitmap, int x, int y);
# void cdBitmapRGB2Map(cdBitmap* bitmap_rgb, cdBitmap* bitmap_map);
# void cdRGB2Map(int width, int height, const unsigned char* red, const unsigned char* green, const unsigned char* blue, unsigned char* index, int pal_size, long *color);
# void wdCanvasHardcopy(cdCanvas* canvas, cdContext* ctx, void *data, void(*draw_func)(cdCanvas *canvas_copy));
# void wdCanvasPutBitmap(cdCanvas* canvas, cdBitmap* bitmap, double x, double y, double w, double h);
#? cdImage* cdCanvasCreateImage(cdCanvas* canvas, int w, int h); [in C]
#? void cdKillImage(cdImage* image); [in C]
#? void cdCanvasGetImage(cdCanvas* canvas, cdImage* image, int x, int y); [in C]
#? void cdCanvasPutImageRect(cdCanvas* canvas, cdImage* image, int x, int y, int xmin, int xmax, int ymin, int ymax); [in C]
#? void cdCanvasScrollArea(cdCanvas* canvas, int xmin, int xmax, int ymin, int ymax, int dx, int dy); [in C]
--
(exists)cd.CreateBitmap(w, h, type: number) -> (bitmap: cdBitmap) [in Lua]
(exists)cd.KillBitmap(bitmap: cdBitmap) [in Lua]
--
deprecated kill/create
cd.KillImageRGB
cd.KillImageRGBA
cd.KillImageMap

###################################################################################################

(info)######## threads+Wx
http://use.perl.org/~Alias/journal/40377

(info)######## XS hint
- ST(0) = &PL_sv_undef;

(cosmetics)######## IUP::Canvas
- XS autodetection cdCanvasLine vs. cdfCanvasLine

(cosmetics)######## Global
- icon - see y:\IUP3.3\fltk\FLTK-0.532007\inc\MBX\FLTK.pm  (ACTION_code)
- Build.PL: no_index => {directory => [qw[examples inc t]], files => [qw[xs/include/ppport.h]]

(cosmetics)######## global
- somehow check memory leaks - http://use.perl.org/~jozef/journal/40411
- somehow check memory consumption - Devel::Size, Devel::Peak, PerlBench 
  - http://stackoverflow.com/questions/1359771/perl-memory-usage-profiling-and-leak-detection
  - http://www252.pair.com/comdog/mastering_perl/Chapters/06.benchmarking.html
- check speed - http://perldoc.perl.org/Benchmark.html (cmpthese, timethese)

(cosmetics)######## IUP::Internal::Element
- tune up destroy() & co. (handle circular references) - check refaddr() trick in LibraryIup.pm

(cosmetics)######## Check this:
- consider return; vs. return undef;
  return IUP::Internal::LibraryIup::_voidfunc; == return;
  return IUP::Internal::LibraryIup::_nonvoidfunc; == return undef;
  SUGGESTION: always call: return IUP::Internal::LibraryIup::_func; (even for void functions)
- http://stackoverflow.com/questions/3435122/whats-the-difference-between-return-and-return-undef-in-perl
- "Perl Best Practices" (and Perl::Critic) suggest not using return undef

(cosmetics)######## IUP::Internal::Canvas
- consider moving 'my %ch_register' from Internal::LibraryIup to Internal::Canvas

(cosmetics)######## IUP::PPlot  
- PPlotPaintTo - maybe not needed: Plots to the given CD canvas instead of the display canvas (does not make much sense)

(cosmetics)######## IUP::Matrix (same as with common attributes)
- try to implement:
  my $m = IUP::Matrix->new(...);
  $m->[12,44] = 'value';
  $m->data->[12,44] = 'value';
  $m->{"BGCOLOR12:44"} = '12 12 12';
  (see SDLx::Surface + SDLx::Surface::TiedMatrix)

(cosmetics)######## global
- cleanup unused funcs from LibraryIup.XS - cross-check-xs-func.pl

(cosmetics)######## IUP (main module)
- ??? better detection of initialized gui than (IUP->Open == IUP_OPENED)?
- ??? detection of codepage used in GUI

(cosmetics)######## all XSs
- consider IUP::Internal::AllInOneLib.xs

(cosmetics)######## IUP::Submenu
- consider using $firstonly param of new()

(cosmetics)######## IUP::ProgressBar
- FGCOLOR seems to be ignored

(cosmetics)######## IUP::Split
- maybe support new($child1, $child2) instead of new(child1=>$child1, child2=>$child2)

(cosmetics)######## IUP::Frame
- maybe duplicate its style to other IUP::*box*
- maybe some common helper function 
  _create_element_child_single($self, $args, $firstonly, \&fucname)
  _create_element_child_multi($self, $args, $firstonly, \&fucname)

(cosmetics)######## IUP::Internal::Element
- change: _create_element should set $self->ihandle value
- Get/SetAttributeSV - via IupGet/SetAttributeHandle

###################################################################################################

(not now, maybe later)######## IUP::OleControl (not a priority)
- missing -> add
- conditionally only on Win32

(not now, maybe later)######## IUP::LayoutDialog
- somehow works but generaly not usable

(not now, maybe later)######## Ideas from lua bindings:
- global registers _IUPLUA_WIDGET_TABLE_REF

(not now, maybe later)######## Ideas from ruby bindings:
- iup.* namespace
- cd.* namespace (constants cd::BLUE, ...)
- just one iup.image (RGB, RGBA - ??? perhaps not supported)
- cdcanvas = Cd.ActiveCanvas()
- iupim just: IupLoadImage, IupSaveImage
- GLCanvasOpen, GL... (global function, not methods of glcanvas class)

(not now, maybe later)######## Linux - platform specific issues
- (<unknown>:4352): Pango-WARNING **: Error loading GSUB table 85
  before MainLoop
- 'Quit' in main menu requires double click

(not now, maybe later)######## Packaging (not a priority)
- RHEL 5 + FC 13,12,11
  - http://search.cpan.org/dist/cpan2rpm/
  - http://search.cpan.org/dist/Ovid/
- Db 4,5 (Ubuntu?)
  - http://search.cpan.org/dist/Debian-Apt-PM/
  - http://www.debian-administration.org/articles/78
    http://www.opensourcery.com/blog/hans-dieter-pearcey/packaging-cpan-modules-debian
- Linux distro info
  - http://distrowatch.com/table.php?distribution=ubuntu (10.04/LTS,9.10,8.04/LTS)
  - http://distrowatch.com/table.php?distribution=debian (5,4)
  - http://distrowatch.com/table.php?distribution=fedora (13,12,11)
  - http://distrowatch.com/table.php?distribution=redhat (5,4)
- vmware images: 
  - http://chrysaor.info/?page=images&filter=Ubuntu
  - http://www.thoughtpolice.co.uk/vmware/

(not now, maybe later)######## Callbacks generation (not a priority)
- missing support for K_* callbacks (no hurry, lua does not implement them as well)
