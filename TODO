IUP::Image*
- remove IUP::ImageRGB IUP::ImageRGBA
- check whether new( ... 1=>.. 2=>.. 3=>.. ) works
- no need for:
  iup.GetNativeHandleImage(handle: userdata) -> (image: imImage) [in Lua]
  iup.GetImageNativeHandle(image: imImage) -> (handle: userdata) [in Lua]

IUP::Canvas (now works without Bitmap/Image/Palette/Pattern-related functions)
- implement missing XS methods to IUP::Internal::Canvas (see notes in Canvas.xs)
# void cdCanvasTransform(cdCanvas* canvas, const double* matrix);
# double* cdCanvasGetTransform(cdCanvas* canvas);
# void cdCanvasTransformMultiply(cdCanvas* canvas, const double* matrix);
# void cdCanvasLineStyleDashes(cdCanvas* canvas, const int* dashes, int count);
# void cdCanvasStipple(cdCanvas* canvas, int w, int h, const unsigned char* stipple);
# unsigned char* cdCanvasGetStipple(cdCanvas* canvas, int *n, int *m);
# void cdCanvasPattern(cdCanvas* canvas, int w, int h, long const int *pattern);
# long* cdCanvasGetPattern(cdCanvas* canvas, int* n, int* m);
# double* cdCanvasVectorTextTransform(cdCanvas* canvas, const double* matrix);
# void cdCanvasPalette(cdCanvas* canvas, int n, const long *palette, int mode);
# void cdCanvasGetImageRGB(cdCanvas* canvas, unsigned char* r, unsigned char* g, unsigned char* b, int x, int y, int w, int h);
# void cdCanvasPutImageRectRGB(...);
# void cdCanvasPutImageRectRGBA(...);
# void cdCanvasPutImageRectMap(...);
# void wdCanvasPutImageRectRGB(...);
# void wdCanvasPutImageRectRGBA(...);
# void wdCanvasPutImageRectMap(...);
# cdBitmap* cdCreateBitmap(int w, int h, int type);
# cdBitmap* cdInitBitmap(int w, int h, int type, ...);
# void cdKillBitmap(cdBitmap* bitmap);
# unsigned char* cdBitmapGetData(cdBitmap* bitmap, int dataptr);
# void cdBitmapSetRect(cdBitmap* bitmap, int xmin, int xmax, int ymin, int ymax);
# void cdCanvasPutBitmap(cdCanvas* canvas, cdBitmap* bitmap, int x, int y, int w, int h);
# void cdCanvasGetBitmap(cdCanvas* canvas, cdBitmap* bitmap, int x, int y);
# void cdBitmapRGB2Map(cdBitmap* bitmap_rgb, cdBitmap* bitmap_map);
# void cdRGB2Map(int width, int height, const unsigned char* red, const unsigned char* green, const unsigned char* blue, unsigned char* index, int pal_size, long *color);
# void wdCanvasHardcopy(cdCanvas* canvas, cdContext* ctx, void *data, void(*draw_func)(cdCanvas *canvas_copy));
# void wdCanvasPutBitmap(cdCanvas* canvas, cdBitmap* bitmap, double x, double y, double w, double h);
# void wdCanvasStipple(cdCanvas* canvas, int w, int h, const unsigned char*fgbg, double w_mm, double h_mm);
# void wdCanvasPattern(cdCanvas* canvas, int w, int h, const long *color, double w_mm, double h_mm);
--
cd.CreatePattern(width, height: number) -> (pattern: cdPattern)
cd.KillPattern(pattern: cdPattern)
--
cd.CreateStipple(width, height: number) -> (stipple: cdStipple)
cd.KillStipple(stipple: cdStipple)
--
cd.CreatePalette(size: number) -> (palette: cdPalette) [in Lua Only]
cd.KillPalette(palette: cdPalette) [in Lua Only]
--
(exists)cd.CreateBitmap(w, h, type: number) -> (bitmap: cdBitmap) [in Lua]
(exists)cd.KillBitmap(bitmap: cdBitmap) [in Lua]
--
deprecated kill/create
cd.KillImageRGB
cd.KillImageRGBA
cd.KillImageMap
- somehow handle CD_xxx constants

IUP::CanvasGL
- consider moving to IUP::Canvas::GL

IUP::ImageLib
- missing -> add
- check memory consumption (maybe separate lib/IUP/Internal/ImageLib.xs)
- Iup::ImageLib->Open() - perhaps follow lua: In Lua, when require "iupluaimglib" is used this function will be automatically called.

IUP::Internal::Element
- change: _create_element should set $self->ihandle value
- maybe missing (comparing to LUA)
  sub GetAttributeData (see LUA implementation)
  sub SetAttributes vs. sub StoreAttribute
  sub GetName (we have $self->name)
- maybe not needed (comparing to LUA)
  sub GetCallback
- GetAttributes 
  in scalar context = string, in list? context = hash?
  or: GetAttributesStr vs. GetAttributesHRef
- tests for all common functions

IUP::OleControl (not a priority)
- missing -> add
- conditionally only on Win32

IUP module
- maybe missing (comparing to LUA)
  sub SetHandle ... IUP->SetHandle('xx', $d->ihandle);  
- maybe not needed (comparing to LUA)
  sub Close
  sub GetFocus  (we have in Element)
  sub GetHandle (we have in Element)
- consider:
  sub Open (probably not)
- tests for all global functions

Ideas from ruby bindings:
- iup.* namespace
- cd.* namespace (constants cd::BLUE, ...)
- just one iup.image (RGB, RGBA - ??? perhaps not supported)
- cdcanvas = Cd.ActiveCanvas()
- iupim just: IupLoadImage, IupSaveImage
- GLCanvasOpen, GL... (global function, not methods of glcanvas class)

Examples
- rewrite all examples from lua to perl
- synchronize ratehr with C examples (they are more complete)

Generate POD documentation
- work on _generators/proc-html2pod.pl
- perhaps html > pod.tt > manually edit *.pod.tt >  conversion *.pod.tt to *.pod

all XSs - BOOT section
- put init calls somewhere else
- maybe BEGIN / END

Constants:
- maybe move key related constants into to IUP::Keys (what about mouse related constants)
- decide what to do with: sub IUP_isPrint (check the doc)

DOC
- pplot.pl: # xxx TODO.DOC xxx note in doc that DS_ has to be set after ->PPlotEnd()
- tree: # xxx TODO xxx note in doc that tree->SetAttribude has to go after dialog->Show

Linux - platform specific issues
- (<unknown>:4352): Pango-WARNING **: Error loading GSUB table 85
  before MainLoop
- 'Quit' in main menu requires double click

Packaging (not a priority)
- RHEL 5 + FC 13,12,11
  - http://search.cpan.org/dist/cpan2rpm/
  - http://search.cpan.org/dist/Ovid/
- Db 4,5 (Ubuntu?)
  - http://search.cpan.org/dist/Debian-Apt-PM/
  - http://www.debian-administration.org/articles/78
- Linux distro info
  - http://distrowatch.com/table.php?distribution=ubuntu (10.04/LTS,9.10,8.04/LTS)
  - http://distrowatch.com/table.php?distribution=debian (5,4)
  - http://distrowatch.com/table.php?distribution=fedora (13,12,11)
  - http://distrowatch.com/table.php?distribution=redhat (5,4)
- vmware images: 
  - http://chrysaor.info/?page=images&filter=Ubuntu
  - http://www.thoughtpolice.co.uk/vmware/

Callbacks generation (not a priority)
- missing support for K_* callbacks (no hurry, lua does not implement them as well)

Global issues
- check memory leaks - http://use.perl.org/~jozef/journal/40411
- detection when running without initialized GUI
- detection of current windowing system
- detection of codepage used in GUI

Consider splitting IUP::Internal::LibraryIup (not a priority)
into:
- IUP::Internal::LibraryIup
- IUP::Internal::LibraryIupControl
- IUP::Internal::LibraryCd
- IUP::Internal::LibraryIm
- IUP::Internal::LibraryImLib
(postponed, the first try did not work as expected)

Build.PL (not a priority)
- RHEL5 compatibility: create_makefile_pl => 'small'; (see Alien::wxWidgets) - probably not
- using: release_testing automated_testing interactive

Bugs (the same trouble in C):
- glcanvas example sometimes lasts too long to start